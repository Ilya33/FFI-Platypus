# PODNAME: FFI::Platypus::Type
# ABSTRACT: Defining types for FFI::Platypus
# VERSION

=head1 SYNOPSIS

OO Interface:

 use FFI::Platypus;
 my $ffi = FFI::Platypus->new;
 $ffi->type('int' => 'my_int');

Declarative interface:

 use FFI::Platypus::Declare
   qw( int void ),
   ['int' => 'my_int'];

=head1 DESCRIPTION

This document describes how to define types using L<FFI::Platypus>.  Types may be
"defined" ahead of time, or simply used when defining or attaching functions.

 # OO example of defining types
 use FFI::Platypus;
 my $ffi = FFI::Platypus->new;
 $ffi->type('int');
 $ffi->type('string');
 
 # OO example of simply using types in function declaration or attachment
 my $f = $ffi->function(puts => ['string'] => 'int');
 $ffi->attach(puts => ['string'] => 'int');

If you are using the declarative interface, you can either pass the types
you need to the L<FFI::Platypus::Declare> C<use> invocation, or you can
use the L<FFI::Platypus::Declare#type> function.  The advantage of the former
is that it creates a Perl constant for that type so that you do not need
to use quotation marks when using the type.

 # Declarative with use
 use FFI::Platypus::Declare 'string', 'int';
 function puts => [string] => int;

 # Declarative with type
 use FFI::Platypus::Declare;
 type 'string';
 type 'int';
 function puts => ['string'] => 'int';

Unless you are using aliases the L<FFI::Platypus#type> method or
L<FFI::Platypus::Declare#type> function are not necessary, but they
will throw an exception if the type is incorrectly specified or not
supported, which may be helpful.

=head2 meta information about types

You can get the size of a type using the L<FFI::Platypus#sizeof> method.

 # OO interface
 my $intsize = $ffi->sizeof('int');
 my intarraysize = $ffi->sizeof('int[64]');
 
 # Declare interface
 my $intsize = sizeof 'int';
 my intarraysize = sizeof 'int[64]';

=head2 converting types

Sometimes it is necessary to convert types.  In particular various pointer types
often need to be converted for consumption in Perl.  For this purpose the
L<FFI::Platypus#cast> method is provided.  It needs to be used with
care though, because not all type combinations are supported.  Here are some 
useful ones:

 # OO interface
 my $address = $ffi->cast('string' => 'opaque', $string);
 my $string  = $ffi->cast('opaque' => 'string', $pointer);
 
 # Declare interface
 use FFI::Platypus::Declare;
 my $address = cast 'string' => 'opaque', $string;
 my $string  = cast 'opaque' => 'string', $pointer;

=head2 aliases

Some times using alternate names is useful for documenting the purpose of an
argument or return type.  For this "aliases" can be come helpful.  The
second argument to the L<FFI::Platypus#type> method or L<FFI::Platypus::Declare#type>
function can be used to define a type alias that can later be used by function
declaration and attachment.

 # OO style
 use FFI::Platypus;
 my $ffi = FFI::Platypus->new;
 $ffi->type('int'    => 'myint');
 $ffi->type('string' => 'mystring');
 my $f = $ffi->function( puts => ['mystring'] => 'myint' );
 $ffi->attach( puts => ['mystring'] => 'myint' );

 # Declarative style
 use FFI::Platypus::Declare;
 type 'int'    => 'myint';
 type 'string' => 'mystring';
 function puts => ['mystring'] => 'myint';

 # Declarative style with use (and with fewer quotes)
 use FFI::Platypus::Declare
   [ int    => 'myint' ],
   [ string => 'mystring' ];
 function puts => [mystring] => myint;

Alias are contained without the L<FFI::Platypus> object, or the current package
if you are using L<FFI::Platypus::Declare>, so feel free to define your own crazy
types without stepping on the toes of other CPAN FFI developers.

=head1 TYPE CATEGORIES

=head2 Native types

So called native types are the types types that the CPU understands that can
be passed on the argument stack or returned by a function.  It does not include
more complicated types like arrays or structs, which can be passed via pointers
(see the opaque type below>.  Generally native types include void, integers,
floats and pointers.

=head3 the void type

This can be used as a return value to indicate a function does not return a value
(or if you want the return value to be ignored).

=head3 integer types

The following native integer types are always available (parentheticals indicates the usual corresponding C type):

=over 4

=item sint8

Signed 8 bit byte (C<signed char>, C<int8_t>).

=item uint8

Unsigned 8 bit byte (C<unsigned char>, C<uint8_t>).

=item sint16

Signed 16 bit integer (C<short>, C<int16_t>)

=item uint16

Unsigned 16 bit integer (C<unsigned short>, C<uint16_t>)

=item sint32

Signed 32 bit integer (C<int>, C<int32_t>)

=item uint32

Unsigned 32 bit integer (C<unsigned int>, C<uint32_t>)

=item sint64

Signed 64 bit integer (C<long> or C<long long>, C<int64_t>)

=item uint64

Unsigned 64 bit integer (C<unsigned long> or C<unsigned long long>, C<uint64_t>)

=back

These integer types are also available, but there actual size and sign may depend on the platform.

=over 4

=item char

This is really an alias for either C<sint8_t> or C<uint8_t>.  If you want to pass a character
in to a C function that takes a character you want to use the perl L<ord|perlfunc#ord> function.
Here is an example that uses the standard libc C<isalpha>, C<isdigit> type functions:

# EXAMPLE: examples/char.pl

=item size_t

This is usually an C<unsigned long>, but it is up to the compiler to decide.  The C<malloc>
function is defined in terms of C<size_t>:

 use FFI::Platypus::Declare qw( size_t opaque );
 function malloc => [size_t] => opaque;

(Note that you can get C<malloc> from L<FFI::Platypus::Memory>).

=back

There are a number of other types that may or may not be available if they are detected when
L<FFI::Platypus> is installed.  Such time include things like C<wchar_t>, C<off_t>, C<wint_t>.
You can use this script to list all the integer types that L<FFI::Platypus> knows about, plus
how they are implemented.

# EXAMPLE: examples/list_integer_types.pl

=head3 floating point types

The following native floating point types are always available (parentheticals indicates the usual corresponding C type):

=over 4

=item float

Single precision floating point (I<float>)

=item double

Double precision floating point (I<double>)

=back

The C<long double> type may be supported in a future version.

=head3 opaque pointers

Opaque pointers are simply a pointer to a region of memory that you do not manage, and do not know the structure of.
It is like a C<void *> in C.  These types are represented in Perl space as integers and get converted to and from
pointers by L<FFI::Platypus>.  You may use C<pointer> as an alias for C<opaque>.

As an example, libarchive defines C<archive> type in its header files, but does not define its content.  
Internally it is defined as a C<struct> type, but the caller does not see this.  It is therefore opaque
to its caller.  There are C<archive_read_new> and C<archive_write_new> functions to create a new instance
of this opaque object and C<archive_read_free> and C<archive_write_free> to destroy this objects when you
are done.

 use FFI::Platypus::Declare qw( opaque int );
 function archive_read_new   => []       => opaque;
 function archive_write_new  => []       => opaque;
 function archive_read_free  => [opaque] => int;
 function archive_write_free => [opaque] => int;

As a special case, when you pass C<undef> into a function that takes an opaque type it will be translated
into C<NULL> for C.  When a C function returns a NULL pointer, it will be translated back to C<undef>.

=head2 Strings

From the CPU's perspective, strings are just pointers.  From Perl and C's perspective, those pointers
point to a series of characters.  For C they are null terminates ("\0").  L<FFI::Platypus> handles
the details where they differ.  Basically when you see C<char *> or C<const char *> used in a C header
file you can expect to be able to use the C<string> type.

 use FFI::Platypus::Declare qw( string int );
 function puts => [string] => int;

Currently strings are only supported as simple argument and return types for C functions called from Perl.
In the future I hope to also support pointers to strings, arrays of strings, strings as closure argument
and return types.  Most of these things can be accomplished with these tools:

=over 4

=item C<opaque> type

=item L<pack|perlfunc#pack>

=item L<unpack|perlfunc#unpack>

=item L<FFI::Platypus#cast>

=item Custom Types (see below)

=back

=head2 Pointer / References

In C you can pass a pointer to a variable to a function in order accomplish the task of
pass by reference.  In Perl the same is task is accomplished by passing a reference (although
you can also modify the argument stack thus Perl supports proper pass by reference as well).

With L<FFI::Platypus> you can define a pointer types to any of the native types described above
(that is all the types we have covered so far except for strings).  When using this you must
make sure to pass in a reference to a scalar, or C<undef> (the later if you intend to pass
C<NULL> into C space).

If the C code makes a change to the value pointed to by the pointer, the scalar will be
updated before returning to Perl space.  Example, with C code.

 /* foo.c */
 void increment_int(int *value)
 {
   if(value != NULL)
     (*value)++;
   else
     fprintf(stderr, "NULL pointer!\n");
 }

 # foo.pl
 use FFI::Platypus::Declare 'void', ['int*' =>'int_p'];
 lib 'libfoo.so'; # change to reflect the dynamic lib 
                  # that contains foo.c
 function increment_int => [int_p] => void;
 my $i = 0;
 increment_int(\$i);   # $i == 1
 increment_int(\$i);   # $i == 2
 increment_int(\$i);   # $i == 3
 increment_int(undef); # prints "NULL pointer!\n"

=head2 Fixed length arrays

Fixed length arrays of native types are supported by L<FFI::Platypus>.  Like pointers, if the values
contained in the array are updated by the C function these changes will be reflected when it returns
to Perl space.  An example of using this is the Unix C<pipe> command which returns a list of two
file descriptors as an array.

# EXAMPLE: examples/pipe.pl

=head2 Closures

A closure (called a "callback" by L<FFI::Raw>) is a Perl subroutine that can be called from C.  In order
to be called from C it needs to be passed to a C function.  To define the closure type you need to provide
a list of argument types and a return type.  As of this writing only native types and strings are supported
as closure argument types and only native types are supported as closure return types.  Here is an example,
with C code:

# EXAMPLE: examples/closure.c

# EXAMPLE: examples/closure.pl

The syntax for specifying a closure type is a list of comma separated types in parentheticals followed by
a narrow arrow C<-E<gt>>, followed by the return type for the closure.  For example a closure that takes
a pointer, an integer and a string and returns an integer would look like this:

 (opaque, int, string) -> int

Care needs to be taken with scoping and closures, because of the way Perl and C handle responsibility
for allocation differently.  Perl keeps reference counts and frees objects when nothing is referencing
them.  In C the code that allocates the memory is considered responsible for explicitly free'ing the
memory for objects it has created.  When you pass a closure into a C function, the C code has a pointer
or reference to that object, but it has no way up letting Perl know when it is no longer using it.
As a result, if you do not keep a reference to your closure around it will be free'd by Perl and if 
the C code ever tries to call the closure it will probably SIGSEGV.  Thus this is almost always wrong:

 set_closure(closure { $_[0] * 2 });  # BAD

In some cases, you may want to create a closure shouldn't ever be free'd.  For example you are passing
a closure into a C function that will retain it for the lifetime of your application.  You can use
the sticky keyword to indicate this, without the need to keep track of the closure:

 set_closure(sticky closure { $_[0] * 2 }); # OKAY 

=head2 Custom Types

=head3 Custom Types in Perl

TODO

=head3 Custom Types in C/XS

Custom types written in C or XS are a future goal of the L<FFI::Platypus> project.  They should
allow some of the flexibility of custom types written in Perl, with potential performance improvements
of native code.

=head1 SEE ALSO

=over 4

=item L<FFI::Platypus>

Main platypus documentation.

=item L<FFI::Platypus::Declare>

Declarative interface for L<FFI::Platypus>.

=back

=cut


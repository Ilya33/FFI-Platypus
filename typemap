ffi_pl_language    T_FFI_PL_LANGUAGE
ffi_pl_type *      T_FFI_PL_TYPE
ffi_pl_signature * T_FFI_PL_SIGNATURE
ffi_pl_lib *       T_FFI_PL_LIB
ffi_pl_sub *       T_FFI_PL_SUB
ffi_pl_string      T_FFI_PL_STRING

OUTPUT
T_FFI_PL_LANGUAGE
  if($var == FFI_PL_LANGUAGE_NONE)
    sv_setpv($arg, "none");
  else if($var == FFI_PL_LANGUAGE_C)
    sv_setpv($arg, "c");
  else
    Perl_croak(aTHX_ \"illegal language type for $arg\");
    
T_FFI_PL_STRING
  $var != NULL ? sv_setpv((SV*)$arg, $var) : sv_setsv((SV*)$arg, &PL_sv_undef);

T_FFI_PL_TYPE
  sv_setref_pv($arg, \"FFI::Platypus::Type\", (void *) $var);
T_FFI_PL_SIGNATURE
  sv_setref_pv($arg, \"FFI::Platypus::Signature\", (void *) $var);
T_FFI_PL_LIB
  sv_setref_pv($arg, \"FFI::Platypus::Lib\", (void *) $var);  
T_FFI_PL_SUB
  sv_setref_pv($arg, \"FFI::Platypus::Sub\", (void *) $var);

INPUT
T_FFI_PL_LANGUAGE
  if(SvOK($arg))
  {
    if(!strcmp(SvPV_nolen($arg), \"none\"))
      $var = FFI_PL_LANGUAGE_NONE;
    else if(!strcmp(SvPV_nolen($arg), \"c\"))
      $var = FFI_PL_LANGUAGE_C;
    else
      Perl_croak(aTHX_ \"$var must be one of undef, none or c\");
  }
  else
  {
    $var = FFI_PL_LANGUAGE_NONE;
  }

T_FFI_PL_STRING
  $var = SvOK($arg) ? ($type)SvPV_nolen($arg) : NULL;

T_FFI_PL_TYPE
  if(sv_isobject($arg) && sv_derived_from($arg, \"FFI::Platypus::Type\"))
    $var = INT2PTR($type, SvIV((SV *) SvRV($arg)));
  else
    Perl_croak(aTHX_ \"$var is not of type FFI::Platypus::Type\");

T_FFI_PL_SIGNATURE
  if(sv_isobject($arg) && sv_derived_from($arg, \"FFI::Platypus::Signature\"))
    $var = INT2PTR($type, SvIV((SV *) SvRV($arg)));
  else
    Perl_croak(aTHX_ \"$var is not of type FFI::Platypus::Signature\");

T_FFI_PL_LIB
  if(sv_isobject($arg) && sv_derived_from($arg, \"FFI::Platypus::Lib\"))
    $var = INT2PTR($type, SvIV((SV *) SvRV($arg)));
  else
    Perl_croak(aTHX_ \"$var is not of type FFI::Platypus::Lib\");

T_FFI_PL_SUB
  if(sv_isobject($arg) && sv_derived_from($arg, \"FFI::Platypus::Sub\"))
    $var = INT2PTR($type, SvIV((SV *) SvRV($arg)));
  else
    Perl_croak(aTHX_ \"$var is not of type FFI::Platypus::Sub\");
